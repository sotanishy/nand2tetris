// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */
class Memory {

    static Array memory;
    static int last;

    /** Initializes the class. */
    function void init() {
        let memory = 0;
        memory[0] = 16384 - 2048;
        memory[1] = -1;
        let last = 0;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return memory[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let memory[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var int prev, cur, block;
        if (~(size > 0)) {
            do Sys.error(5);  // size must be positive
            return -1;
        }
        let prev = -1;
        let cur = 0;
        while (~(memory[cur] > size)) {
            let prev = cur;
            let cur = memory[cur + 1];
            if (cur = -1) {
                do Sys.error(6);  // heap overflow
                return -1;
            }
        }
        let memory[prev + 1] = memory[cur + 1];
        let memory[last + 1] = cur + size + 1;
        let last = cur + size + 1;
        let memory[last] = memory[cur] - size - 1;
        let memory[cur] = size + 1;
        return cur + 1;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        let memory[last + 1] = o - 1;
        let last = o - 1;
        return;
    }
}
