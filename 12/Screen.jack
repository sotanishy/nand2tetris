// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 256 rows (indexed 0..255, top to bottom)
 * of 512 pixels each (indexed 0..511, left to right). The top left pixel on
 * the screen is indexed (0,0).
 */
class Screen {

    static boolean color;
    static Array bit;
    static int base;

    /** Initializes the Screen. */
    function void init() {
        var int i, x;
        let color = true;
        let base = 16384;
        let bit = Array.new(16);
        let i = 0;
        let x = 1;
        while (i < 16) {
            let bit[i] = x;
            let x = x + x;
            let i = i + 1;
        }
        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int i;
        let i = base;
        while (i < 24576) {
            do Memory.poke(i, 0);
            let i = i + 1;
        }
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let color = b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int t, q, addr;
        let q = x / 16;
        let addr = base + (32 * y) + q;
        let t = Memory.peek(addr);
        if (color) {
            do Memory.poke(addr, t | bit[x - (16 * q)]);
        }
        else {
            do Memory.poke(addr, t & ~bit[x - (16 * q)]);
        }
        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int dx, dy, a, b, adyMinusbdx;
        var boolean neg;
        let dx = x2 - x1;
        let dy = y2 - y1;
        let a = 0;
        let b = 0;
        let adyMinusbdx = 0;
        let neg = false;

         if (dx < 0) {
            let dx = -dx;
            let dy = -dy;
            let x1 = x2;
            let y1 = y2;
        }

        if (dy < 0) {
            let neg = true;
            let dy = -dy;
        }

        if (dy = 0) {
            while (~(a > dx)) {
                do Screen.drawPixel(x1 + a, y1);
                let a = a + 1;
            }
            return;
        }

        while (~(a > dx) & ~(b > dy)) {
            if (neg) {
                do Screen.drawPixel(x1 + a, y1 - b);
            }
            else {
                do Screen.drawPixel(x1 + a, y1 + b);
            }
            if (adyMinusbdx < 0) {
                let a = a + 1;
                let adyMinusbdx = adyMinusbdx + dy;
            }
            else {
                let b = b + 1;
                let adyMinusbdx = adyMinusbdx - dx;
            }
        }
        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        var int x;
        let x = x1;
        while (~(x > x2)) {
            do Screen.drawLine(x, y1, x, y2);
            let x = x + 1;
        }
        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int a, b;
        let a = 0;
        let b = -r;
        while (~(b > r)) {
            while ((a * a) + (b * b) < (r * r)) {
                let a = a + 1;
            }
            while ((a * a) + (b * b) > (r * r)) {
                let a = a - 1;
            }
            do Screen.drawLine(x - a, y + b, x + a, y + b);
            let b = b + 1;
        }
        return;
    }
}
