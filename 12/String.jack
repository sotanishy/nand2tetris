// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {

    field Array str;
    field int len, maxlen;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        if (~(maxLength > 0)) {
            // maxLength must be positive
            do Sys.error(14);
            return this;
        }
        let len = 0;
        let maxlen = maxLength;
        if (maxLength > 0) {
            let str = Array.new(maxLength);
        }
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        if (maxlen > 0) {
            do str.dispose();
        }
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return len;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        if ((j < 0) | ~(j < len)) {
            // index out of bounds
            do Sys.error(15);
            return -1;
        }
        return str[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        if ((j < 0) | ~(j < len)) {
            // index out of bounds
            do Sys.error(16);
            return;
        }
        let str[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        if (len = maxlen) {
            // string full
            do Sys.error(17);
            return -1;
        }
        let str[len] = c;
        let len = len + 1;
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if (len = 0) {
            // string empty
            do Sys.error(18);
            return;
        }
        let len = len - 1;
        return;
    }

    /** Returns the integer value of this string,
     *  until a non-digit character is detected. */
    method int intValue() {
        var int num, i;
        var boolean neg;
        let num = 0;
        let i = 0;
        let neg = false;
        if (str[0] = 45) {
            let neg = true;
            let i = 1;
        }
        while ((i < len) & (47 < str[i]) & (str[i] < 58)) {
            let num = 10 * num + str[i] - 48;
            let i = i + 1;
        }
        if (neg) {
            let num = -num;
        }
        return num;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        var int i, q;
        var boolean neg;
        let len = 0;
        let neg = false;
        if (val < 0) {
            let val = -val;
            let neg = true;
        }
        while (val > 0) {
            if (len = maxlen) {
                // string full
                do Sys.error(19);
                return;
            }
            let q = val / 10;
            let str[len] = val - (10 * q) + 48;
            let val = q;
            let len = len + 1;
        }
        if (neg) {
            if (len = maxlen) {
                // string full
                do Sys.error(19);
                return;
            }
            let str[len] = 45;
            let len = len + 1;
        }
        let i = 0;
        while (i < (len / 2)) {
            let q = str[i];
            let str[i] = str[len - i - 1];
            let str[len - i - 1] = q;
            let i = i + 1;
        }
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
